export SCGCE="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

if [ "$(type -t namemunge)" != function ] ; then
  namemunge () {
    if ! echo ${!1} | egrep -q "(^|:)$2($|:)" ; then
      if [ -z "${!1}" ] ; then
        eval "$1=$2"
      else
        if [ "$3" == "after" ] ; then
          eval "$1=\$$1:$2"
        else
          eval "$1=$2:\$$1"
        fi
      fi
    fi
    eval "export $1"
  }
fi

if [ -d ~/opt/google-cloud-sdk/bin ]; then
  namemunge PATH ~/opt/google-cloud-sdk/bin
fi

if [ -f ~/opt/google-cloud-sdk/completion.bash.inc ]; then
  source ~/opt/google-cloud-sdk/completion.bash.inc
fi

if [ -d $SCGCE/bin ]; then
  namemunge PATH $SCGCE/bin
fi

alias gcelist="gcloud compute instances list"
alias gcedelete="gcloud compute instances delete"
alias gceproject="gcloud config list core/project 2> /dev/null | grep 'project =' | cut -f 3 -d ' '"

# During ssh remote execution, sometimes the alias isn't available.
if [ -z "${SCGCE_NO_BUCKET_NAME}" ] && [ -n `which gcloud` ] && [ -n "$(type -t gceproject)" ] && [ "$(type -t gceproject)" == alias ]; then
  export SCGCE_CONDA_BUCKET_NAME="`gceproject`-conda-packages"
else
  export SCGCE_CONDA_BUCKET_NAME=""
fi

gceipof() {
  instdir=$SCGCE/var/run/$1
  cat $instdir/public_ip
}

gcekhof() {
  instdir=$SCGCE/var/run/$1
  echo $instdir/known_hosts
}

gssh() {
  ssh -o UserKnownHostsFile=`gcekhof $1` `gceipof $1` "${@:2}"
}

gscp() {
  scp -o UserKnownHostsFile=`gcekhof $1` "${@:2}"
}

gstart() {

  # default value.
  machtype="n1-standard-1"
  disksize="20GB"
  noinit=""

  usage="Usage: gstart <instance_name> [-m machine_type] [-d disk_size]"

  instname=$1
  shift
  if [ -z "$instname" ]; then
    echo "Incorrect instance name"
    echo $usage
    return
  fi

  while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    -n|--no-initialize)
    noinit="1"
    ;;
    -m|--mechine-type)
    machtype="$2"
    shift
    ;;
    -d|--disk-size)
    disksize="$2"
    shift
    ;;
    -h|--help)
    help="1"
    ;;
    *)
      # unknown option
    ;;
  esac
  shift # past argument or value
  done

  if [ -n "$help" ]; then
    echo $usage
    return
  fi

  if [ -z "$noinit" ]; then
    gce-create-instance $instname -m $machtype -d $disksize
  fi
  gce-register-instance $instname
  registered=$?
  while [ $registered -ne 0 ] ; do
    echo "SSH not ready, wait 3 seconds ..."
    sleep 3
    gce-register-instance $instname
    registered=$?
  done
  cmd="while [ ! -f /var/lib/bootstrap-gce.sh ] ; \
do echo \"file not found, wait 3 seconds ...\" ; sleep 3 ; done ; \
echo \"run /var/lib/bootstrap-gce.sh\" ; \
/var/lib/bootstrap-gce.sh"
  gssh $instname $cmd
}

gmaster() {
  # build a master node of SOLVCON cluster.

  usage="Usage: gmaster <instance_name>"

  instname=$1
  shift
  if [ -z "$instname" ]; then
    echo "Incorrect instance name"
    echo $usage
    return
  fi

  while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    -h|--help)
    help="1"
    ;;
    *)
      # unknown option
    ;;
  esac
  shift # past argument or value
  done

  if [ -n "$help" ]; then
    echo $usage
    return
  fi

  script_location="$HOME/opt/gce/bin/admin/bootstrap-cluster.sh"
  cmd="echo \"run $script_location master\" ; \
$script_location master"
  gssh $instname $cmd
}

gclient() {
  # build a client node of SOLVCON cluster.

  usage="Usage: gclient <instance_name> [-i master node IP]"

  instname=$1
  shift
  if [ -z "$instname" ]; then
    echo "Incorrect instance name"
    echo $usage
    return
  fi

  while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    -i|--ip-address)
    ip_address="$2"
    shift
    ;;
    -h|--help)
    help="1"
    ;;
    *)
      # unknown option
    ;;
  esac
  shift # past argument or value
  done

  if [ -n "$help" ]; then
    echo $usage
    return
  fi

  script_location="$HOME/opt/gce/bin/admin/bootstrap-cluster.sh"
  ip_address=`gce-guess-master`
  script_cmd="$script_location client -i $ip_address"
  cmd="echo \"run $script_cmd\" ; \
$script_cmd"
  gssh $instname $cmd
}

gcluster() {
  # build a SOLVCON cluster with GCE.
  # instance number should be larger than 1, because there should be 1 node used
  # as a master and the others are client nodes. The master node is bulit by
  # default.
  usage="Usage: gcluster <instance_number>"

  instnumber=$1
  shift
  if [ -z "$instnumber" ] || [ "$instnumber" -lt 1 ]; then
    echo "Incorrect instance number."
    echo $usage
    return
  fi

  while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    -n|--nosetests)
    # build and run nosetests right after the cluster is ready.
    nose="1"
    ;;
    -h|--help)
    help="1"
    ;;
    *)
      # unknown option
    ;;
  esac
  shift # past argument or value
  done

  if [ -n "$help" ]; then
    echo $usage
    return
  fi

  echo "Building master node ..."
  # Do not use underscore for instance naming. GCE kits do not allow underscore
  # for field conflict.
  gstart "solvcon-cluster-master"
  gmaster "solvcon-cluster-master"
  for (( node_index=1; node_index<=$instnumber; node_index++ ))
  #for node_index in {1..$instnumber};
  do
    echo "Building client node $node_index ..."
    gstart "solvcon-cluster-client-$node_index"
    gclient "solvcon-cluster-client-$node_index"
  done
  echo "Complete to build a SOLVCON cluster!"
  if [ -n "$nose" ]; then
    cmd="source activate ; \
    export SOLVCON_NODELIST=$HOME/solvcon-remote/node_list ; \
    cd $HOME/solvcon-remote/solvcon-src ; \
    python setup.py build_ext --inplace; \
    nosetests --with-doctest -v; \
    nosetests ftests/parallel/* -v"
    gssh solvcon-cluster-client-1 $cmd
  fi
}

alias gcessh="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias gcescp="scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

# conda.
alias use.conda3="namemunge PATH ~/opt/conda3/bin"
alias use.conda2="namemunge PATH ~/opt/conda2/bin"
# aliases are not expanded when the shell is not interactive.  This cause error
# message "use.conda3: command not found" dumped to stdout, and may result in
# the other issues. For example, when non-interactive ssh connection is
# established to scale up parallel computing, the shell may access the message
# from the stdout.  Use explicit commands instead of aliases.
if [ -d ~/opt/conda3/bin ]; then namemunge PATH ~/opt/conda3/bin; fi
if [ -d ~/solvcon ]; then export SCSRC=$HOME/solvcon; fi

# vim: set et nobomb fenc=utf8 ft=sh ff=unix sw=2 ts=2:
